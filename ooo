void MultiPlexing::handleWriteData(Socket &sock, ) 
{
    //  handling client data writing
    // Get the appropriate response data to send back to the client
    char buffer[1025];
    bzero(buffer, 1025);
    int rc = 0;
    // sock.getReq().setStarted(time(NULL));
    sock.setWrite_done(0);
    if (!sock.get_Resp().getIsOpen())
    {
        if (sock.getReq().getConn())
            sock.get_Resp().setHeader("Connection", "Keep-Alive");
        else
            sock.get_Resp().setHeader("Connection", "close");
        rc = write(sock.getSocket_fd() , sock.get_Resp().toString().c_str(), sock.get_Resp().toString().length());
        if (sock.get_Resp().getFile() != "")
        {
            sock.get_Resp().setFd(open(sock.get_Resp().getFile().c_str(), O_RDONLY));
            if (sock.get_Resp().getFd() < 0)
            {
                perror("open");
                sock.setWrite_done(1);
                return ;
            }
            sock.get_Resp().setIsOpen(1);
        }
        else
            sock.setWrite_done(1);
    }
    else if ((sock.get_Resp().getOffset() + 1024) > strtoul(sock.get_Resp().getHeaders().find("Content-Length")->second.c_str(), NULL, 10) && sock.get_Resp().getFile() != "")
    {
        read(sock.get_Resp().getFd(), buffer, stoi(sock.get_Resp().getHeaders().find("Content-Length")->second) - sock.get_Resp().getOffset());
        rc = write(sock.getSocket_fd() , buffer , stoi(sock.get_Resp().getHeaders().find("Content-Length")->second) - sock.get_Resp().getOffset());
        sock.get_Resp().setOffset(sock.get_Resp().getOffset() + rc);
        sock.setWrite_done(1);
        if (sock.get_Resp().getFd() > 0)
        {
            if (close(sock.get_Resp().getFd()) != 0)
                perror("close");
        }
    }
    else if (sock.get_Resp().getFile() != "")
    {
        read(sock.get_Resp().getFd(), buffer, 1024);
        rc = write(sock.getSocket_fd() , buffer, 1024);
        sock.get_Resp().setOffset(sock.get_Resp().getOffset() + rc);
    }
    if (rc <= 0)
    {
        std::cerr << "Error writing to client socket" << std::endl;
        sock.setWrite_done(1);
    }
}


for (size_t i = 0; i < clients.size(); i++)
        {
            if (FD_ISSET(clients[i].first.getSocket_fd(), &io.read_cpy)) {
                handleReadData(clients[i], servers[clients[i].second.getPort()]);
                if (!clients[i].first.getClose_conn() && clients[i].first.getread_done()) {
                    clients[i].first.getrequest().clear();
                    FD_SET(clients[i].first.getSocket_fd(), &io.writefds);
                }
            }

            if (FD_ISSET(clients[i].first.getSocket_fd(), &io.write_cpy)) {
                if (clients[i].first.get_Resp().getStatusCode() == 0)
                    clients[i].first.get_Resp().prepare_response(clients[i].first.getReq(), clients[i].second);
                handleWriteData(clients[i].first);
                if (clients[i].first.getWrite_done()) {
                    clients[i].first.setWrite_done(0);
                    FD_CLR(clients[i].first.getSocket_fd(), &io.writefds);
                    clients[i].first.clear();
                }
            }
            if (clients[i].first.getClose_conn()) {
                FD_CLR(clients[i].first.getSocket_fd(), &io.readfds);
                FD_CLR(clients[i].first.getSocket_fd(), &io.writefds);
                close(clients[i].first.getSocket_fd());
                if (clients[i].first.get_Resp().getFile() != "" && clients[i].first.get_Resp().getFd() > 0)
                    close(clients[i].first.get_Resp().getFd());
                clients[i].first.clear();
                clients.erase(clients.begin() + i);
                i--;
            }
        }